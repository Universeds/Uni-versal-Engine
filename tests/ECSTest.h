// Generated by chatgpt, too lazy to make my own testing framework

#pragma once
#include <iostream>
#include <string>
#include <vector>
#include <functional>

namespace UniversalEngine {
    namespace Testing {
        
        class TestResult {
        public:
            TestResult(const std::string& name, bool passed, const std::string& message = "")
                : m_TestName(name), m_Passed(passed), m_Message(message) {}
            
            bool Passed() const { return m_Passed; }
            const std::string& GetName() const { return m_TestName; }
            const std::string& GetMessage() const { return m_Message; }
            
        private:
            std::string m_TestName;
            bool m_Passed;
            std::string m_Message;
        };
        
        class TestSuite {
        public:
            TestSuite(const std::string& name) : m_SuiteName(name) {}
            
            void AddTest(const std::string& testName, std::function<bool()> testFunc) {
                m_Tests.push_back({testName, testFunc});
            }
            
            std::vector<TestResult> RunTests() {
                std::vector<TestResult> results;
                
                std::cout << "=== Running Test Suite: " << m_SuiteName << " ===" << std::endl;
                
                for (const auto& test : m_Tests) {
                    std::cout << "Running test: " << test.first << "..." << std::endl;
                    
                    try {
                        bool passed = test.second();
                        results.emplace_back(test.first, passed, passed ? "PASSED" : "FAILED");
                        std::cout << "  " << (passed ? "✓ PASSED" : "✗ FAILED") << std::endl;
                    } catch (const std::exception& e) {
                        results.emplace_back(test.first, false, std::string("EXCEPTION: ") + e.what());
                        std::cout << "  ✗ EXCEPTION: " << e.what() << std::endl;
                    }
                }
                
                return results;
            }
            
            void PrintSummary(const std::vector<TestResult>& results) {
                int passed = 0;
                int failed = 0;
                
                for (const auto& result : results) {
                    if (result.Passed()) {
                        passed++;
                    } else {
                        failed++;
                    }
                }
                
                std::cout << "\n=== Test Summary for " << m_SuiteName << " ===" << std::endl;
                std::cout << "Total tests: " << results.size() << std::endl;
                std::cout << "Passed: " << passed << std::endl;
                std::cout << "Failed: " << failed << std::endl;
                std::cout << "Success rate: " << (results.empty() ? 0 : (passed * 100 / results.size())) << "%" << std::endl;
                
                if (failed > 0) {
                    std::cout << "\nFailed tests:" << std::endl;
                    for (const auto& result : results) {
                        if (!result.Passed()) {
                            std::cout << "  - " << result.GetName() << ": " << result.GetMessage() << std::endl;
                        }
                    }
                }
                
                std::cout << "=========================================" << std::endl;
            }
            
        private:
            std::string m_SuiteName;
            std::vector<std::pair<std::string, std::function<bool()>>> m_Tests;
        };
        
        // Test assertion macros
        #define ASSERT_TRUE(condition) \
            if (!(condition)) { \
                std::cout << "    ASSERTION FAILED: " << #condition << " at line " << __LINE__ << std::endl; \
                return false; \
            }
        
        #define ASSERT_FALSE(condition) \
            if (condition) { \
                std::cout << "    ASSERTION FAILED: " << #condition << " should be false at line " << __LINE__ << std::endl; \
                return false; \
            }
        
        #define ASSERT_EQ(expected, actual) \
            if ((expected) != (actual)) { \
                std::cout << "    ASSERTION FAILED: Expected " << (expected) << " but got " << (actual) << " at line " << __LINE__ << std::endl; \
                return false; \
            }
        
        #define ASSERT_NE(expected, actual) \
            if ((expected) == (actual)) { \
                std::cout << "    ASSERTION FAILED: Expected " << (expected) << " to not equal " << (actual) << " at line " << __LINE__ << std::endl; \
                return false; \
            }
    }
}
